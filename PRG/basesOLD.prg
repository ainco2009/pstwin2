* *********************************************************
* *
* * 12/03/2007              BASES.DBC              19:01:53
* *
* *********************************************************
* *
* * Description:
* * This program was automatically generated by GENDBC
* * Version 2.26.67
* *
* *********************************************************
LPARAMETERS cDirBase, cPrefijo
LOCAL cBase
cBase = cDirBase+"BASE"+cPrefijo+".DBC"

DisplayStatus([Creating database...])
*CLOSE DATA ALL
CREATE DATABASE (cBase)
DisplayStatus([Creating table EMPL]+cPrefijo+[...])
MakeTable_EMPLBASE(cPrefijo,cDirBase)
DisplayStatus([Creating table CONT]+cPrefijo+[...])
MakeTable_CONTBASE(cPrefijo,cDirBase)
DisplayStatus([Creating table SERV]+cPrefijo+[...])
MakeTable_SERVBASE(cPrefijo,cDirBase)
DisplayStatus([Creating table INCL]+cPrefijo+[...])
MakeTable_INCLBASE(cPrefijo,cDirBase)

DisplayStatus([Creando Relaciones...])
MakeRelation_1(cPrefijo,cDirBase)
MakeRelation_2(cPrefijo,cDirBase)
MakeRelation_3(cPrefijo,cDirBase)
DisplayStatus([Creando Reglas de Integridad Referencial...])
MakeRI(cPrefijo,cBase)
DisplayStatus([Completado..])


********* Procedure Re-Creation *********
IF !FILE(cDirBase+[BASES.krt])
    =MESSAGEBOX("No se encuentra el archivo de procedimientos almacenados",48,"Aviso")
ELSE
	*CLOSE DATABASE
	USE (cBase)
	g_SetSafety = SET('SAFETY')
	SET SAFETY OFF
	LOCATE FOR Objectname = 'StoredProceduresSource'
	IF FOUND()
        APPEND MEMO Code FROM (cDirBase+[BASES.krt]) OVERWRITE
	    REPLACE Code WITH SUBSTR(Code, 70, 32852)
	ENDIF
	LOCATE FOR Objectname = 'StoredProceduresObject'
	IF FOUND()
        APPEND MEMO Code FROM (cDirBase+[BASES.krt]) OVERWRITE
        REPLACE Code WITH SUBSTR(Code, 32922)
	ENDIF
    SET SAFETY &g_SetSafety
	USE
	*OPEN DATABASE (cBase)
ENDIF



FUNCTION MakeTable_EMPLBASE
LPARAMETERS cPrefijo,cDirBase
***** Table setup for EMPLBASE *****
CREATE TABLE (cDirBase+'EMPL'+cPrefijo+'.DBF') NAME ('EMPL'+cPrefijo);
					 (CEDULA C(9) NOT NULL CHECK .NOT.EMPTY(cedula) ERROR "Cédula no puede estar vacia", ;
                       APELLIDOS C(30) NOT NULL CHECK .NOT.EMPTY(apellidos) ERROR "Apellido no puede estar vacio", ;
                       NOMBRES C(20) NOT NULL CHECK .NOT.EMPTY(nombres) ERROR "Nombre no puede estar vacio", ;
                       NRO_CUENTA C(30) NOT NULL, ;
                       NACIONALIDAD C(1) NOT NULL DEFAULT "V", ;
                       CODIGO_ORG C(4) NOT NULL, ;
                       UBI_SERVIC C(3) NOT NULL CHECK .NOT.EMPTY(ubi_servic) ERROR "Servicio no puede estar vacio", ;
                       TIPO_NOMINA C(1) NOT NULL DEFAULT "E", ;
                       DIRECCION C(60) NOT NULL, ;
                       TELEFONO C(30) NOT NULL, ;
                       AFILIADO L NOT NULL DEFAULT .F., ;
                       MODO C(1) NOT NULL, ;
                       MONTO_DESC N(13, 2) NOT NULL, ;
                       FEC_ULT_PAGO D NOT NULL, ;
                       FEC_UTL_COMPRA D NOT NULL)

***** Create each index for EMPLBASE *****
ALTER TABLE ('EMPL'+cPrefijo) ADD PRIMARY KEY CEDULA TAG ('EMPL'+cPrefijo) COLLATE 'MACHINE'
INDEX ON UBI_SERVIC TAG EMPLSERV COLLATE 'MACHINE'
INDEX ON APELLIDOS TAG EMPLAPELL COLLATE 'MACHINE'
INDEX ON NRO_CUENTA TAG EMPLCTA COLLATE 'MACHINE'



***** Change properties for EMPLBASE *****

CREATE TRIGGER ON ('EMPL'+cPrefijo) FOR DELETE AS __ri_delete_emplbase()
CREATE TRIGGER ON ('EMPL'+cPrefijo) FOR INSERT AS __ri_insert_emplbase()
CREATE TRIGGER ON ('EMPL'+cPrefijo) FOR UPDATE AS __ri_update_emplbase()
ENDFUNC

FUNCTION MakeTable_CONTBASE(cPrefijo,cDirBase)
***** Table setup for CONTBASE *****
                       
CREATE TABLE (cDirBase+'CONT'+cPrefijo+'.DBF') NAME ('CONT'+cPrefijo) (CEDULA C(9) NOT NULL, ;
                       COD_CASA C(4) NOT NULL, ;
                       NUM_CONTRA C(8) NOT NULL CHECK .NOT.EMPTY(num_contra) ERROR "nro. contrato no pued estar vacio", ;
                       RELAINCLUS C(8) NOT NULL, ;
                       FEC_CONTRA D NOT NULL, ;
                       MON_CONTRA N(13, 2) NOT NULL, ;
                       FEC_VIGENC D NOT NULL, ;
                       MODALIDAD N(1, 0) NOT NULL DEFAULT 2, ;
                       NUM_CUOTAS N(3, 0) NOT NULL, ;
                       MON_CUOTAS N(13, 2) NOT NULL, ;
                       CODIGO_ORG C(4) NOT NULL, ;
                       FEC_ENVIO D NOT NULL, ;
                       FEC_ULT_MD D NOT NULL, ;
                       FEC_ANULAC D NOT NULL, ;
                       CTS_PAGADA N(3, 0) NOT NULL, ;
                       SALDO N(13, 2) NOT NULL, ;
                       FEC_ULT_PG D NOT NULL, ;
                       CTS_MOROSA N(3, 0) NOT NULL)

***** Create each index for CONTBASE *****
INDEX ON CEDULA TAG ('CONC'+cPrefijo) COLLATE 'MACHINE'
INDEX ON RELAINCLUS TAG CONTRELA COLLATE 'MACHINE'


***** Change properties for CONTBASE *****
CREATE TRIGGER ON (cDirBase+'CONT'+cPrefijo) FOR INSERT AS __ri_insert_contbase()
CREATE TRIGGER ON (cDirBase+'CONT'+cPrefijo) FOR UPDATE AS __ri_update_contbase()

ENDFUNC

FUNCTION MakeTable_SERVBASE(cPrefijo,cDirBase)
***** Table setup for SERVBASE *****
CREATE TABLE (cDirBase+'SERV'+cPrefijo+'.DBF') NAME ('SERV'+cPrefijo) (COD_SERVIC C(3) NOT NULL, ;
                       NOMB_SERVIC C(30) NOT NULL,;
                       COD_ORG C(4) NOT NULL)

***** Create each index for SERVBASE *****
ALTER TABLE (cDirBase+'SERV'+cPrefijo) ADD PRIMARY KEY COD_SERVIC TAG COD_SERVIC COLLATE 'MACHINE'

***** Change properties for SERVBASE *****
CREATE TRIGGER ON ('SERV'+cPrefijo) FOR DELETE AS __ri_delete_servbase()
CREATE TRIGGER ON ('SERV'+cPrefijo) FOR UPDATE AS __ri_update_servbase()
ENDFUNC

FUNCTION MakeTable_INCLBASE(cPrefijo,cDirBase)
***** Table setup for INCLBASE *****
CREATE TABLE (cDirBase+'INCL'+cPrefijo+'.DBF') NAME ('INCL'+cPrefijo);
					  (RELAINCLUS C(8) NOT NULL, ;
                       COD_CASA C(4) NOT NULL CHECK .NOT.EMPTY(cod_casa) ERROR "Código de la Casa no puede estar vacio", ;
                       FEC_VIGENC D NOT NULL CHECK .NOT.EMPTY(fec_vigenc) ERROR "Fecha de Vigencia no puede estar vacia", ;
                       CANT_CONTRA N(4, 0) NOT NULL CHECK cant_contra>0 ERROR "Cantidad de Contratos debe ser mayor a cero", ;
                       MONTO N(15, 2) NOT NULL CHECK monto>0 ERROR "Monto Relación debe ser mayor a cero", ;
                       FEC_RELACION D NOT NULL DEFAULT DATE(), ;
                       CODIGO_ORG C(4) NOT NULL)
***** Create each index for INCLBASE *****
ALTER TABLE ('INCL'+cPrefijo) ADD PRIMARY KEY RELAINCLUS TAG ('INCL'+cPrefijo) COLLATE 'MACHINE'

***** Change properties for INCLBASE *****

CREATE TRIGGER ON ('INCL'+cPrefijo) FOR DELETE AS __ri_delete_inclbase()
CREATE TRIGGER ON ('INCL'+cPrefijo) FOR UPDATE AS __ri_update_inclbase()
ENDFUNC

*************** Begin Relations Setup **************

FUNCTION MakeRelation_1(cPrefijo,cDirBase)
ALTER TABLE (cDirBase+'CONT'+cPrefijo) ADD FOREIGN KEY TAG ('CONC'+cPrefijo) REFERENCES ('EMPL'+cPrefijo) TAG ('EMPL'+cPrefijo)

ENDFUNC


FUNCTION MakeRelation_2(cPrefijo,cDirBase)
ALTER TABLE (cDirBase+'EMPL'+cPrefijo) ADD FOREIGN KEY TAG EMPLSERV REFERENCES ('SERV'+cPrefijo) TAG COD_SERVIC

ENDFUNC

FUNCTION MakeRelation_3(cPrefijo,cDirBase)
ALTER TABLE (cDirBase+'CONT'+cPrefijo) ADD FOREIGN KEY TAG CONTRELA REFERENCES ('INCL'+cPrefijo) TAG ('INCL'+cPrefijo)
ENDFUNC

FUNCTION MakeRI(cPrefijo,cBase)
***** Referential Integrity Setup *****
CLOSE DATABASE
USE (cBase)
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'cont'+cPrefijo
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND ('conc'+cPrefijo)$Property AND ('empl'+cPrefijo)$Property AND ('empl'+cPrefijo)$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CRR   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF


LOCATE FOR ObjectType = 'Table' AND ObjectName = 'empl'+cPrefijo
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'emplserv'$Property AND ('serv'+cPrefijo) $Property AND 'cod_servic'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CRR   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF

LOCATE FOR ObjectType = 'Table' AND ObjectName = 'cont'+cPrefijo
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'contrela'$Property AND ('INCL'+cPrefijo)$Property AND ('INCL'+cPrefijo)$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CCI   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
USE
USE
ENDFUNC


FUNCTION DisplayStatus(lcMessage)
WAIT WINDOW NOWAIT lcMessage
ENDFUNC
