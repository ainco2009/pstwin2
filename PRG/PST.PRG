* *********************************************************
* *
* * 20/10/2007               PST.DBC               17:38:31
* *
* *********************************************************
* *
* * Description:
* * This program was automatically generated by GENDBC
* * Version 2.26.67
* *
* *********************************************************


DisplayStatus([Creating database...])
CLOSE DATA ALL
CREATE DATABASE 'PST.DBC'
DisplayStatus([Creating table USUARIOS...])
MakeTable_USUARIOS()
DisplayStatus([Creating table LOGUSUA...])
MakeTable_LOGUSUA()
DisplayStatus([Creating table ACCESOS...])
MakeTable_ACCESOS()
DisplayStatus([Creating table MODULOS...])
MakeTable_MODULOS()
DisplayStatus([Creating table MOTIVOS...])
MakeTable_MOTIVOS()
DisplayStatus([Creating table CODRECHAZOS...])
MakeTable_CODRECHAZOS()
DisplayStatus([Creating table CALENDARIO...])
MakeTable_CALENDARIO()
DisplayStatus([Creating table ORGANISM...])
MakeTable_ORGANISM()
DisplayStatus([Creating table ORGUSUA...])
MakeTable_ORGUSUA()
DisplayStatus([Creating table SUCURSAL...])
MakeTable_SUCURSAL()
DisplayStatus([Creating table CASACOME...])
MakeTable_CASACOME()
DisplayStatus([Creating table DBPAGOS...])
MakeTable_DBPAGOS()
DisplayStatus([Creating table PROMOTOR...])
MakeTable_PROMOTOR()
DisplayStatus([Creating table COM_PROM...])
MakeTable_COM_PROM()
DisplayStatus([Creating table PARAMETRO...])
MakeTable_PARAMETRO()
DisplayStatus([Creating table BACKUP...])
MakeTable_BACKUP()
DisplayStatus([Creating table FORMDESC...])
MakeTable_FORMDESC()
DisplayStatus([Creating table LISTANEGRA...])
MakeTable_LISTANEGRA()
DisplayStatus([Creating table COD_RESP...])
MakeTable_COD_RESP()
DisplayStatus([Creating table RECLAMOS...])
MakeTable_RECLAMOS()
DisplayStatus([Creating table MODCONTRA...])
MakeTable_MODCONTRA()
DisplayStatus([Creating table DEVCONTRA...])
MakeTable_DEVCONTRA()
DisplayStatus([Creating view VEWDBPAGOS...])
MakeView_VEWDBPAGOS()
DisplayStatus([Creating persistent relations...])
MakeRelation_1()
MakeRelation_2()
MakeRelation_3()
MakeRelation_4()
MakeRelation_5()
MakeRelation_6()
DisplayStatus([Creating relational integrity rules...])
MakeRI()
DisplayStatus([Finished.])


********* Procedure Re-Creation *********
IF !FILE([PST.krt])
    ? [Warning! No Procedure File Found!]
ELSE
	CLOSE DATABASE
	USE 'PST.DBC'
	g_SetSafety = SET('SAFETY')
	SET SAFETY OFF
	LOCATE FOR Objectname = 'StoredProceduresSource'
	IF FOUND()
        APPEND MEMO Code FROM [PST.krt] OVERWRITE
	    REPLACE Code WITH SUBSTR(Code, 70, 50119)
	ENDIF
	LOCATE FOR Objectname = 'StoredProceduresObject'
	IF FOUND()
        APPEND MEMO Code FROM [PST.krt] OVERWRITE
        REPLACE Code WITH SUBSTR(Code, 50189)
	ENDIF
    SET SAFETY &g_SetSafety
	USE
	OPEN DATABASE [PST.DBC]
ENDIF

FUNCTION MakeTable_USUARIOS
***** Table setup for USUARIOS *****
CREATE TABLE 'USUARIOS.DBF' NAME 'USUARIOS' (IDUSUA C(3) NOT NULL CHECK .NOT.EMPTY(idusua) ERROR "ID. de Usuario no puede estar vacio", ;
                       USUA C(8) NOT NULL CHECK .NOT.EMPTY(usua) ERROR "Usuario no puede  estar vacio", ;
                       CLVE C(9) NOT NULL ERROR "Clave no puede estar vacia", ;
                       NIVE N(1, 0) NOT NULL DEFAULT 2, ;
                       ALTA T NOT NULL DEFAULT DATETIME(), ;
                       NOMB C(40) NOT NULL CHECK .NOT.EMPTY(nomb) ERROR "Nombre no puede estar vacio", ;
                       BLOQUEADO L NOT NULL, ;
                       SEL_ORG N(1, 0) NOT NULL CHECK sel_org=>0.AND.sel_org<=7 DEFAULT 1, ;
                       MANT_ORG N(1, 0) NOT NULL DEFAULT 7, ;
                       CASACOME N(1, 0) NOT NULL DEFAULT 0, ;
                       CALENDARIO N(1, 0) NOT NULL DEFAULT 0, ;
                       EMPLEADOS N(1, 0) NOT NULL DEFAULT 0, ;
                       PROMOTORES N(1, 0) NOT NULL DEFAULT 0, ;
                       OFICINAS N(1, 0) NOT NULL DEFAULT 0, ;
                       SERVICIOS N(1, 0) NOT NULL DEFAULT 0, ;
                       MOT_DEV N(1, 0) NOT NULL DEFAULT 0, ;
                       COD_RECHAZO N(1, 0) NOT NULL DEFAULT 0, ;
                       COD_RECH_ORG N(1, 0) NOT NULL DEFAULT 0, ;
                       INCLUSIONES N(1, 0) NOT NULL DEFAULT 0, ;
                       ENVIO_DESC N(1, 0) NOT NULL DEFAULT 0, ;
                       DESC_LOTE N(1, 0) NOT NULL DEFAULT 0, ;
                       DESC_MANUAL N(1, 0) NOT NULL DEFAULT 0, ;
                       ENVIO_ACTUAL N(1, 0) NOT NULL DEFAULT 0, ;
                       RECEP_ACTUAL N(1, 0) NOT NULL DEFAULT 0, ;
                       ENVIO_INCL N(1, 0) NOT NULL DEFAULT 0, ;
                       RECEP_INCL N(1, 0) NOT NULL DEFAULT 0, ;
                       ENVIO_AFILIA N(1, 0) NOT NULL DEFAULT 0, ;
                       RECEP_AFILIA N(1, 0) NOT NULL DEFAULT 0, ;
                       CIERRE_MES N(1, 0) NOT NULL DEFAULT 0, ;
                       CIERRE_EJERC N(1, 0) NOT NULL DEFAULT 0, ;
                       CONTRATOS N(1, 0) NOT NULL DEFAULT 0, ;
                       ESTADISTICAS N(1, 0) NOT NULL DEFAULT 0, ;
                       MOROSOS N(1, 0) NOT NULL DEFAULT 0, ;
                       LISTA_NEGRA N(1, 0) NOT NULL DEFAULT 0, ;
                       PRE_CUADRE N(1, 0) NOT NULL DEFAULT 0, ;
                       INFORMES N(1, 0) NOT NULL DEFAULT 0, ;
                       CONFIG_GENERAL N(1, 0) NOT NULL DEFAULT 0, ;
                       USUARIOS N(1, 0) NOT NULL DEFAULT 0, ;
                       AUDITORIA N(1, 0) NOT NULL DEFAULT 0, ;
                       DIS_ENV_DESC N(1, 0) NOT NULL DEFAULT 0, ;
                       DIS_REC_DESC N(1, 0) NOT NULL DEFAULT 0, ;
                       DIS_ENV_AFIL N(1, 0) NOT NULL DEFAULT 0, ;
                       DIS_REC_AFIL N(1, 0) NOT NULL DEFAULT 0, ;
                       INDEXAR N(1, 0) NOT NULL DEFAULT 0, ;
                       COMPACTAR N(1, 0) NOT NULL DEFAULT 0, ;
                       VALIDAR N(1, 0) NOT NULL DEFAULT 0, ;
                       RESPALDAR N(1, 0) NOT NULL DEFAULT 0, ;
                       RECUPERAR N(1, 0) NOT NULL DEFAULT 0, ;
                       REGENERAR N(1, 0) NOT NULL DEFAULT 0, ;
                       REINTEGRO N(1, 0) NOT NULL DEFAULT 0, ;
                       RECLAMO N(1, 0) NOT NULL DEFAULT 0, ;
                       DEVOLUCION N(1, 0) NOT NULL DEFAULT 0, ;
                       SUSPENDER N(1, 0) NOT NULL DEFAULT 0, ;
                       ANULAR N(1, 0) NOT NULL DEFAULT 0)

***** Create each index for USUARIOS *****
INDEX ON USUA TAG USUA CANDIDATE COLLATE 'MACHINE'
ALTER TABLE 'USUARIOS' ADD PRIMARY KEY IDUSUA TAG IDUSUA COLLATE 'MACHINE'

***** Change properties for USUARIOS *****
DBSETPROP('USUARIOS.IDUSUA', 'Field', 'Caption', "ID  de Usuario")
DBSETPROP('USUARIOS.IDUSUA', 'Field', 'Comment', "Id  de Usuario para usarlo en los registros que este usuario edite")
DBSETPROP('USUARIOS.IDUSUA', 'Field', 'Format', "!k")
DBSETPROP('USUARIOS.USUA', 'Field', 'Caption', "Usuario:")
DBSETPROP('USUARIOS.USUA', 'Field', 'Comment', "Nombre de Usuario ( User Name )")
DBSETPROP('USUARIOS.USUA', 'Field', 'Format', "K!")
DBSETPROP('USUARIOS.CLVE', 'Field', 'Caption', "Clave:")
DBSETPROP('USUARIOS.CLVE', 'Field', 'Comment', "clave del usuario ( passwork)")
DBSETPROP('USUARIOS.CLVE', 'Field', 'Format', "k!")
DBSETPROP('USUARIOS.NIVE', 'Field', 'Caption', "Nivel")
DBSETPROP('USUARIOS.NIVE', 'Field', 'Comment', "Nivel del Usuario " + CHR(13) + "1  = Administrador" + CHR(13) + " 2 = Usuario")
DBSETPROP('USUARIOS.NIVE', 'Field', 'InputMask', "9")
DBSETPROP('USUARIOS.NIVE', 'Field', 'Format', "k")
DBSETPROP('USUARIOS.ALTA', 'Field', 'Comment', "fecha de la ültima actualización del registro")
DBSETPROP('USUARIOS.NOMB', 'Field', 'Caption', "Nombre")
DBSETPROP('USUARIOS.NOMB', 'Field', 'Comment', "Nombre del Usuario")
DBSETPROP('USUARIOS.NOMB', 'Field', 'Format', "!k")
DBSETPROP('USUARIOS.SEL_ORG', 'Field', 'Caption', "Seleccionar Organismo")
DBSETPROP('USUARIOS.SEL_ORG', 'Field', 'InputMask', "9")
DBSETPROP('USUARIOS.SEL_ORG', 'Field', 'Format', "K")
DBSETPROP('USUARIOS.MANT_ORG', 'Field', 'Caption', "Mantenimiento de Organismos")
DBSETPROP('USUARIOS.MANT_ORG', 'Field', 'InputMask', "9")
DBSETPROP('USUARIOS.MANT_ORG', 'Field', 'Format', "k")
DBSETPROP('USUARIOS', 'Table', 'Comment', "Tabla que mantiene informacíon de los usuarios  que tienen  acceso al Sistema" + CHR(13) + "Se tienen dos niveles de usuarios" + CHR(13) + "Administrador  nivel 1" + CHR(13) + "Usuario           nivel 2")
CREATE TRIGGER ON 'USUARIOS' FOR DELETE AS __ri_delete_usuarios()
CREATE TRIGGER ON 'USUARIOS' FOR UPDATE AS __ri_update_usuarios()
ENDFUNC

FUNCTION MakeTable_LOGUSUA
***** Table setup for LOGUSUA *****
CREATE TABLE 'LOGUSUA.DBF' NAME 'LOGUSUA' (USUA C(8) NOT NULL, ;
                      IDUSUA C(3) NOT NULL, ;
                      FEHO T NOT NULL, ;
                      MODL C(20) NOT NULL, ;
                      NERROR N(5, 0) NOT NULL, ;
                      CERROR C(120) NOT NULL, ;
                      NLINEA N(5, 0) NOT NULL, ;
                      CLINEA C(120) NOT NULL, ;
                      CPROG C(120) NOT NULL, ;
                      IDPROCESO C(8) NOT NULL)

***** Create each index for LOGUSUA *****
INDEX ON USUA TAG USUA COLLATE 'MACHINE'
INDEX ON IDUSUA TAG IDUSUAL COLLATE 'MACHINE'

***** Change properties for LOGUSUA *****
ENDFUNC

FUNCTION MakeTable_ACCESOS
***** Table setup for ACCESOS *****
CREATE TABLE 'ACCESOS.DBF' NAME 'ACCESOS' (ID_USUA C(3) NOT NULL, ;
                      COD_MODULO C(4) NOT NULL, ;
                      COD_ACCESO C(3) NOT NULL)

***** Create each index for ACCESOS *****
ALTER TABLE 'ACCESOS' ADD PRIMARY KEY ID_USUA+COD_MODULO TAG ACCESO COLLATE 'MACHINE'
INDEX ON ID_USUA TAG USUACCESO COLLATE 'MACHINE'

***** Change properties for ACCESOS *****
ENDFUNC

FUNCTION MakeTable_MODULOS
***** Table setup for MODULOS *****
CREATE TABLE 'MODULOS.DBF' NAME 'MODULOS' (COD_MODULO C(4) NOT NULL, ;
                      DESC_MODULO C(30) NOT NULL, ;
                      TIPO_MODULO N(1, 0) NOT NULL)

***** Create each index for MODULOS *****
ALTER TABLE 'MODULOS' ADD PRIMARY KEY COD_MODULO TAG CODMODULO COLLATE 'MACHINE'

***** Change properties for MODULOS *****
ENDFUNC

FUNCTION MakeTable_MOTIVOS
***** Table setup for MOTIVOS *****
CREATE TABLE 'MOTIVOS.DBF' NAME 'MOTIVOS' (COD_MOTIVO C(3) NOT NULL CHECK .NOT.EMPTY(cod_motivo) ERROR "Código no puede estar vacio", ;
                      NOM_MOTIVO C(50) NOT NULL CHECK .NOT.EMPTY(nom_motivo) ERROR "Descripción no puede estar vacia", ;
                      ESGRAVE L NOT NULL DEFAULT .F., ;
                      ACTUAL T NOT NULL, ;
                      ID_USER C(3) NOT NULL)

***** Create each index for MOTIVOS *****
INDEX ON COD_MOTIVO TAG MOTIVOS CANDIDATE COLLATE 'MACHINE'

***** Change properties for MOTIVOS *****
CREATE TRIGGER ON 'MOTIVOS' FOR DELETE AS __ri_delete_motivos()
CREATE TRIGGER ON 'MOTIVOS' FOR UPDATE AS __ri_update_motivos()
ENDFUNC

FUNCTION MakeTable_CODRECHAZOS
***** Table setup for CODRECHAZOS *****
CREATE TABLE 'CODRECHAZOS.DBF' NAME 'CODRECHAZOS' (COD_RECHAZO C(2) NOT NULL CHECK .NOT.EMPTY(cod_rechazo) ERROR "El Código del Rechazo no puede estar vacio", ;
                          NOM_RECHAZO C(50) NOT NULL CHECK .NOT.EMPTY(nom_rechazo) ERROR "Descripción no puede estar vacia", ;
                          TIPO_RECHAZO N(1, 0) NOT NULL DEFAULT 2)

***** Create each index for CODRECHAZOS *****
ALTER TABLE 'CODRECHAZOS' ADD PRIMARY KEY COD_RECHAZO TAG IDCODRECHA COLLATE 'MACHINE'

***** Change properties for CODRECHAZOS *****
DBSETPROP('CODRECHAZOS.COD_RECHAZO', 'Field', 'Caption', "Código Rechazo")
DBSETPROP('CODRECHAZOS.COD_RECHAZO', 'Field', 'InputMask', "99")
DBSETPROP('CODRECHAZOS.COD_RECHAZO', 'Field', 'Format', "!")
DBSETPROP('CODRECHAZOS.NOM_RECHAZO', 'Field', 'Caption', "Descripción:")
DBSETPROP('CODRECHAZOS.NOM_RECHAZO', 'Field', 'Format', "!k")
ENDFUNC

FUNCTION MakeTable_CALENDARIO
***** Table setup for CALENDARIO *****
CREATE TABLE 'CALENDARIO.DBF' NAME 'CALENDARIO' (FEC_VIGENCIA D NOT NULL CHECK .NOT.EMPTY(fec_vigencia) ERROR "Fecha de Vigencia no puede estar vacia", ;
                         FEC_PROCESO D NOT NULL CHECK fec_proceso=>fec_vigencia ERROR "Fecha de Proceso debe ser mayor o igual que Fecha de Vigencia", ;
                         MODALIDAD C(1) NOCPTRANS NOT NULL)

***** Create each index for CALENDARIO *****
INDEX ON MODALIDAD+DTOS(FEC_VIGENCIA) TAG FEC_VIGENC CANDIDATE COLLATE 'MACHINE'
INDEX ON MODALIDAD+DTOS(FEC_PROCESO) TAG FEC_PROCES COLLATE 'MACHINE'
INDEX ON DTOS(FEC_VIGENCIA) TAG FECVIGEN COLLATE 'MACHINE'

***** Change properties for CALENDARIO *****
DBSETPROP('CALENDARIO.FEC_VIGENCIA', 'Field', 'Caption', "Fecha de Vigencia:")
DBSETPROP('CALENDARIO.FEC_VIGENCIA', 'Field', 'Format', "k")
DBSETPROP('CALENDARIO.FEC_PROCESO', 'Field', 'Caption', "Fecha de Proceso")
DBSETPROP('CALENDARIO.FEC_PROCESO', 'Field', 'Format', "k")
ENDFUNC

FUNCTION MakeTable_ORGANISM
***** Table setup for ORGANISM *****
CREATE TABLE 'ORGANISM.DBF' NAME 'ORGANISM' (CODIGO_ORG C(4) NOT NULL CHECK .NOT.EMPTY(codigo_org) ERROR "Código del Organismo no puede estar vacio", ;
                       NOMBRE_ORG C(30) NOT NULL CHECK .NOT.EMPTY(nombre_org) ERROR "Nombre del Organismo no puede estar vacio", ;
                       SUFIJO C(4) NOT NULL CHECK .NOT.EMPTY(sufijo) ERROR "Código de archivo no puede estar vacio", ;
                       BANCO L NOT NULL DEFAULT .T., ;
                       COD_BANCO C(4) NOT NULL, ;
                       VAL_MODULO11 L NOT NULL DEFAULT .T., ;
                       CTA_VACIA L NOT NULL DEFAULT .F., ;
                       LOGO C(30) NOT NULL, ;
                       TIPO_CIERRE N(1, 0) NOT NULL DEFAULT 1, ;
                       RELAINCLUS C(8) NOT NULL DEFAULT "00000001", ;
                       FEC_ENVIO D NOT NULL, ;
                       FEC_RECIBO D NOT NULL, ;
                       PORCENTAJE N(5, 2) NOT NULL, ;
                       MON_PROCESO N(8, 2) NOT NULL, ;
                       FEC_ULT_RESPALDO D NOT NULL, ;
                       FEC_ULT_CIERRE D NOT NULL, ;
                       NUM_ENVIO C(8) NOT NULL DEFAULT "00000001", ;
                       NUM_AFILIA C(8) NOT NULL DEFAULT "00000001")

***** Create each index for ORGANISM *****
ALTER TABLE 'ORGANISM' ADD PRIMARY KEY CODIGO_ORG TAG ORGANISM COLLATE 'MACHINE'
INDEX ON SUFIJO TAG ORGBASE CANDIDATE COLLATE 'MACHINE'

***** Change properties for ORGANISM *****
CREATE TRIGGER ON 'ORGANISM' FOR DELETE AS __ri_delete_organism()
CREATE TRIGGER ON 'ORGANISM' FOR UPDATE AS __ri_update_organism()
ENDFUNC

FUNCTION MakeTable_ORGUSUA
***** Table setup for ORGUSUA *****
CREATE TABLE 'ORGUSUA.DBF' NAME 'ORGUSUA' (COD_ORG C(4) NOT NULL, ;
                      IDUSUA C(3) NOT NULL, ;
                      TIPO_ACCESO L NOT NULL)

***** Create each index for ORGUSUA *****
INDEX ON COD_ORG TAG ORGUSUA COLLATE 'MACHINE'
INDEX ON COD_ORG+IDUSUA TAG CODUSUA COLLATE 'MACHINE'

***** Change properties for ORGUSUA *****
CREATE TRIGGER ON 'ORGUSUA' FOR INSERT AS __ri_insert_orgusua()
CREATE TRIGGER ON 'ORGUSUA' FOR UPDATE AS __ri_update_orgusua()
ENDFUNC

FUNCTION MakeTable_SUCURSAL
***** Table setup for SUCURSAL *****
CREATE TABLE 'SUCURSAL.DBF' NAME 'SUCURSAL' (COD_OFIC C(3) NOT NULL CHECK .NOT.EMPTY(cod_ofic) ERROR "Código no puede estar vacio", ;
                       NOMB_OFIC C(40) NOT NULL CHECK .NOT.EMPTY(nomb_ofic) ERROR "Nombre no puede estar vacio", ;
                       DIRECCION C(60) NOT NULL, ;
                       TELEF_OFIC C(20) NOT NULL, ;
                       CONTACTO C(20) NOT NULL, ;
                       TELEF_CONT C(20) NOT NULL, ;
                       EMAIL C(50) NOT NULL)

***** Create each index for SUCURSAL *****
INDEX ON COD_OFIC TAG SUCURSAL CANDIDATE COLLATE 'MACHINE'

***** Change properties for SUCURSAL *****
ENDFUNC

FUNCTION MakeTable_CASACOME
***** Table setup for CASACOME *****
CREATE TABLE 'CASACOME.DBF' NAME 'CASACOME' (COD_CASA C(4) NOT NULL CHECK .NOT.EMPTY(cod_casa) ERROR "Código no puede estar vacio", ;
                       RAZON C(40) NOT NULL CHECK .NOT.EMPTY(razon) ERROR "Razón Social no puede estar vacio", ;
                       SECTOR C(2) NOT NULL, ;
                       RIF C(12) NOT NULL CHECK .NOT.EMPTY(rif) ERROR "R.I.F.: No puede estar vacio", ;
                       COD_RAMO C(3) NOT NULL, ;
                       FEC_INGRES D NOT NULL, ;
                       FEC_ULT_PG D NOT NULL, ;
                       DIRECCION1 C(80) NOT NULL CHECK .NOT.EMPTY(direccion1) ERROR "Dirección no puede estar vacia", ;
                       TELEFONOS C(25) NOT NULL, ;
                       CONTACTO C(40) NOT NULL, ;
                       FAX C(25) NOT NULL, ;
                       CELULAR C(25) NOT NULL, ;
                       MON_PAGADO N(16, 2) NOT NULL, ;
                       ISLR L NOT NULL, ;
                       REP_LEGAL C(40) NOT NULL, ;
                       EMAIL C(40) NOT NULL, ;
                       NRO_CTA C(30) NOT NULL, ;
                       CHEQUE_A N(1, 0) NOT NULL DEFAULT 1, ;
                       FORMA_PAGO N(1, 0) NOT NULL DEFAULT 1, ;
                       COBRA_MOROSO L NOT NULL DEFAULT .T., ;
                       COD_PROMOTOR C(4) NOT NULL)

***** Create each index for CASACOME *****
ALTER TABLE 'CASACOME' ADD PRIMARY KEY COD_CASA TAG CASACOME COLLATE 'MACHINE'
INDEX ON RAZON TAG NOMBCASA COLLATE 'MACHINE'

***** Change properties for CASACOME *****
DBSETPROP('CASACOME.COD_CASA', 'Field', 'Caption', "Código:")
DBSETPROP('CASACOME.COD_CASA', 'Field', 'InputMask', "9999")
DBSETPROP('CASACOME.COD_CASA', 'Field', 'Format', "k")
DBSETPROP('CASACOME.RAZON', 'Field', 'Caption', "Razón Social:")
DBSETPROP('CASACOME.RAZON', 'Field', 'Format', "k!")
DBSETPROP('CASACOME.RIF', 'Field', 'Caption', "R.I.F.:")
DBSETPROP('CASACOME.RIF', 'Field', 'Format', "k")
DBSETPROP('CASACOME.DIRECCION1', 'Field', 'Caption', "Dirección.'")
DBSETPROP('CASACOME.DIRECCION1', 'Field', 'Format', "k!")
CREATE TRIGGER ON 'CASACOME' FOR DELETE AS __ri_delete_casacome()
CREATE TRIGGER ON 'CASACOME' FOR UPDATE AS __ri_update_casacome()
ENDFUNC

FUNCTION MakeTable_DBPAGOS
***** Table setup for DBPAGOS *****
CREATE TABLE 'DBPAGOS.DBF' NAME 'DBPAGOS' (CODIGO_ORG C(4) NOT NULL CHECK .NOT.EMPTY(codigo_org) ERROR "Organismo no puede estar vacio", ;
                      COD_CASA C(4) NOT NULL, ;
                      DESDE N(15, 2) NOT NULL CHECK desde>0 ERROR "Monto Desde debe ser mayor a cero", ;
                      HASTA N(15, 2) NOT NULL CHECK hasta=>desde ERROR "Monto Hasta debe ser mayor o igual a Monto Desde", ;
                      PORCENTAJE N(5, 2) NOT NULL CHECK porcentaje>0 ERROR "Porcentaje debe ser mayor a cero", ;
                      PROCESAR N(8, 2) NOT NULL)

***** Create each index for DBPAGOS *****
INDEX ON COD_CASA TAG DBPAGOCASA COLLATE 'MACHINE'
INDEX ON CODIGO_ORG TAG DBPAGORG COLLATE 'MACHINE'
INDEX ON COD_CASA+CODIGO_ORG TAG DBPAGOS COLLATE 'MACHINE'

***** Change properties for DBPAGOS *****
CREATE TRIGGER ON 'DBPAGOS' FOR INSERT AS __ri_insert_dbpagos()
CREATE TRIGGER ON 'DBPAGOS' FOR UPDATE AS __ri_update_dbpagos()
ENDFUNC

FUNCTION MakeTable_PROMOTOR
***** Table setup for PROMOTOR *****
CREATE TABLE 'PROMOTOR.DBF' NAME 'PROMOTOR' (COD_PROMOTOR C(4) NOT NULL CHECK .NOT.EMPTY(cod_promotor) ERROR "Código de Promotor no puede estar vacio", ;
                       CED_PROMOTOR C(9) NOT NULL CHECK .NOT.EMPTY(ced_promotor) ERROR "Cédula no puede estar vacia", ;
                       NOMB_PROMOTOR C(30) NOT NULL CHECK .NOT.EMPTY(nomb_promotor) ERROR "Nombre no puede estar vacio", ;
                       DIRECC_PROM C(50) NOT NULL, ;
                       TELEF_PROM C(20) NOT NULL, ;
                       EMAIL C(50) NOT NULL, ;
                       PORCENTAJE N(5, 2) NOT NULL CHECK porcentaje>0 ERROR "Comisión por Defecto debe ser mayor que cero" DEFAULT 10)

***** Create each index for PROMOTOR *****
ALTER TABLE 'PROMOTOR' ADD PRIMARY KEY COD_PROMOTOR TAG PROMCOD COLLATE 'MACHINE'

***** Change properties for PROMOTOR *****
DBSETPROP('PROMOTOR.COD_PROMOTOR', 'Field', 'Caption', "Código del Promotor")
DBSETPROP('PROMOTOR.COD_PROMOTOR', 'Field', 'InputMask', "9999")
DBSETPROP('PROMOTOR.COD_PROMOTOR', 'Field', 'Format', "K!")
DBSETPROP('PROMOTOR.CED_PROMOTOR', 'Field', 'Caption', "Cèdula:")
DBSETPROP('PROMOTOR.CED_PROMOTOR', 'Field', 'InputMask', "999999999")
DBSETPROP('PROMOTOR.CED_PROMOTOR', 'Field', 'Format', "K!")
DBSETPROP('PROMOTOR.NOMB_PROMOTOR', 'Field', 'Caption', "Apellidos y Nombres:")
DBSETPROP('PROMOTOR.NOMB_PROMOTOR', 'Field', 'Format', "!K")
DBSETPROP('PROMOTOR.EMAIL', 'Field', 'Caption', "E-mail")
DBSETPROP('PROMOTOR.EMAIL', 'Field', 'Format', "k")
DBSETPROP('PROMOTOR.PORCENTAJE', 'Field', 'Caption', "Comisión:")
DBSETPROP('PROMOTOR.PORCENTAJE', 'Field', 'InputMask', "99.99")
DBSETPROP('PROMOTOR.PORCENTAJE', 'Field', 'Format', "K")
ENDFUNC

FUNCTION MakeTable_COM_PROM
***** Table setup for COM_PROM *****
CREATE TABLE 'COM_PROM.DBF' NAME 'COM_PROM' (CODPROM C(4) NOT NULL CHECK .NOT.EMPTY(codprom) ERROR "Código de Promotor no puede estar vacio", ;
                       COD_CASA C(4) NOT NULL, ;
                       DESDE N(15, 2) NOT NULL CHECK desde>0 ERROR "Monto Desde debe ser mayor a cero", ;
                       HASTA N(15, 2) NOT NULL CHECK hasta=>desde ERROR "Monto Hasta Debe ser Mayor a Monto Hasta", ;
                       COMISION N(5, 2) NOT NULL CHECK comision>0 ERROR "Comisión Debe ser mayor a cero")

***** Create each index for COM_PROM *****
ALTER TABLE 'COM_PROM' ADD PRIMARY KEY CODPROM+COD_CASA+STR(DESDE,1,15) TAG COM_PROM COLLATE 'MACHINE'
INDEX ON CODPROM TAG COM_CASA COLLATE 'MACHINE'
INDEX ON COD_CASA TAG COMCASA2 COLLATE 'MACHINE'

***** Change properties for COM_PROM *****
DBSETPROP('COM_PROM.CODPROM', 'Field', 'Caption', "Código Promotor:")
DBSETPROP('COM_PROM.CODPROM', 'Field', 'InputMask', "9999")
DBSETPROP('COM_PROM.CODPROM', 'Field', 'Format', "K")
DBSETPROP('COM_PROM.COD_CASA', 'Field', 'Caption', "Cód. Casa")
DBSETPROP('COM_PROM.COD_CASA', 'Field', 'InputMask', "9999")
DBSETPROP('COM_PROM.COD_CASA', 'Field', 'Format', "k")
DBSETPROP('COM_PROM.DESDE', 'Field', 'Caption', "Monto Desde:")
DBSETPROP('COM_PROM.DESDE', 'Field', 'Format', "k")
DBSETPROP('COM_PROM.HASTA', 'Field', 'Caption', "Monto Hasta")
DBSETPROP('COM_PROM.HASTA', 'Field', 'Format', "K")
DBSETPROP('COM_PROM.COMISION', 'Field', 'Caption', "Comisión (%)")
DBSETPROP('COM_PROM.COMISION', 'Field', 'Format', "K")
CREATE TRIGGER ON 'COM_PROM' FOR INSERT AS __ri_insert_com_prom()
CREATE TRIGGER ON 'COM_PROM' FOR UPDATE AS __ri_update_com_prom()
ENDFUNC

FUNCTION MakeTable_PARAMETRO
***** Table setup for PARAMETRO *****
CREATE TABLE 'PARAMETRO.DBF' NAME 'PARAMETRO' (EMPRESA C(40) NOT NULL CHECK .NOT.EMPTY(empresa) ERROR "Nombre de Empresa no Puede estar vacio" DEFAULT "PROVEEDURIA PST, C.A.", ;
                        DIRECCION C(80) NOT NULL, ;
                        TELEFONO C(40) NOT NULL, ;
                        RIF C(15) NOT NULL, ;
                        IVA N(5, 2) NOT NULL, ;
                        RETENCION N(5, 2) NOT NULL, ;
                        FOTO G NOT NULL, ;
                        LOGO C(60) NOT NULL, ;
                        PROCEDIMIENTO M NOT NULL)

***** Create each index for PARAMETRO *****

***** Change properties for PARAMETRO *****
ENDFUNC

FUNCTION MakeTable_BACKUP
***** Table setup for BACKUP *****
CREATE TABLE 'BACKUP.DBF' NAME 'BACKUP' (USUARIO C(8) NOT NULL, ;
                     FEC_CREADO T NOT NULL, ;
                     BACKUP_FILE C(12) NOT NULL, ;
                     DIRECTORIO C(50) NOT NULL, ;
                     BASE_DATOS C(30) NOT NULL)

***** Create each index for BACKUP *****
ALTER TABLE 'BACKUP' ADD PRIMARY KEY BACKUP_FILE+TTOC(FEC_CREADO) TAG BACKFILE COLLATE 'MACHINE'
INDEX ON DTOS(FEC_CREADO) TAG BACKDATE DESCENDING  COLLATE 'MACHINE'

***** Change properties for BACKUP *****
ENDFUNC

FUNCTION MakeTable_FORMDESC
***** Table setup for FORMDESC *****
CREATE TABLE 'FORMDESC.DBF' NAME 'FORMDESC' (CODIGO_ORG C(4) NOT NULL, ;
                       NOMB_FORMA C(8) NOT NULL, ;
                       ENCABEZADO N(3, 0) NOT NULL DEFAULT 1, ;
                       DETALLE N(3, 0) NOT NULL DEFAULT 1, ;
                       RESUMEN N(3, 0) NOT NULL DEFAULT 0, ;
                       LONG_REG N(3, 0) NOT NULL DEFAULT 80, ;
                       CED_INIC N(3, 0) NOT NULL DEFAULT 1, ;
                       CED_LONG N(3, 0) NOT NULL DEFAULT 8, ;
                       MONTO_INIC N(3, 0) NOT NULL DEFAULT 1, ;
                       MONTO_LONG N(3, 0) NOT NULL DEFAULT 15, ;
                       DECIMAL_INIC N(3, 0) NOT NULL DEFAULT 1, ;
                       DECIMAL_LONG N(3, 0) NOT NULL DEFAULT 2, ;
                       COD_RESP_INIC N(3, 0) NOT NULL, ;
                       COD_RESP_LONG N(3, 0) NOT NULL, ;
                       DESC_RESP_INI N(3, 0) NOT NULL, ;
                       DESC_RESP_LONG N(3, 0) NOT NULL)

***** Create each index for FORMDESC *****
ALTER TABLE 'FORMDESC' ADD PRIMARY KEY NOMB_FORMA TAG FORMDESC COLLATE 'MACHINE'

***** Change properties for FORMDESC *****
ENDFUNC

FUNCTION MakeTable_LISTANEGRA
***** Table setup for LISTANEGRA *****
CREATE TABLE 'LISTANEGRA.DBF' NAME 'LISTANEGRA' (CEDULA C(9) NOT NULL CHECK .NOT.EMPTY(cedula) ERROR "Cédula no puede estar vacia", ;
                         NOMBRES C(35) NOT NULL CHECK .NOT.EMPTY(nombres) ERROR "Apellidos y Nombres no puede estar vacio", ;
                         FECHA D NOT NULL CHECK .NOT.EMPTY(fecha) ERROR "Fecha  no puede estar vacia" DEFAULT DATE(), ;
                         CODIGO_ORG C(4) NOT NULL)

***** Create each index for LISTANEGRA *****
ALTER TABLE 'LISTANEGRA' ADD PRIMARY KEY CEDULA TAG LISTACED COLLATE 'MACHINE'

***** Change properties for LISTANEGRA *****
ENDFUNC

FUNCTION MakeTable_COD_RESP
***** Table setup for COD_RESP *****
CREATE TABLE 'COD_RESP.DBF' NAME 'COD_RESP' (COD_RECHAZO C(2) NOT NULL, ;
                       COD_RESP C(30) NOT NULL, ;
                       CODIGO_ORG C(4) NOT NULL)

***** Create each index for COD_RESP *****

***** Change properties for COD_RESP *****
ENDFUNC

FUNCTION MakeTable_RECLAMOS
***** Table setup for RECLAMOS *****
CREATE TABLE 'RECLAMOS.DBF' NAME 'RECLAMOS' (NUM_RECLAMO C(8) NOT NULL DEFAULT SUBSTR(SYS(2015),3), ;
                       CEDULA C(9) NOT NULL, ;
                       FEC_RECLAMO D NOT NULL, ;
                       RECIBIDO C(30) NOT NULL, ;
                       STATUS N(1, 0) NOT NULL, ;
                       NOTAS M NOT NULL)

***** Create each index for RECLAMOS *****
INDEX ON CEDULA TAG RECLAMOS COLLATE 'MACHINE'

***** Change properties for RECLAMOS *****
ENDFUNC

FUNCTION MakeTable_MODCONTRA
***** Table setup for MODCONTRA *****
CREATE TABLE 'MODCONTRA.DBF' NAME 'MODCONTRA' (CEDULA C(9) NOT NULL, ;
                        COD_CASA C(4) NOT NULL, ;
                        NUM_CONTRA C(8) NOT NULL, ;
                        RELAINCLUS C(8) NOT NULL, ;
                        FEC_CONTRA D NOT NULL, ;
                        MON_CONTRA N(13, 2) NOT NULL, ;
                        FEC_VIGENC D NOT NULL, ;
                        MODALIDAD N(1, 0) NOT NULL, ;
                        NUM_CUOTAS N(3, 0) NOT NULL, ;
                        MON_CUOTAS N(13, 2) NOT NULL, ;
                        CODIGO_ORG C(4) NOT NULL, ;
                        FEC_ENVIO D NOT NULL, ;
                        FEC_ULT_MD D NOT NULL, ;
                        FEC_ANULAC D NOT NULL, ;
                        CTS_PAGADA N(3, 0) NOT NULL, ;
                        SALDO N(13, 2) NOT NULL, ;
                        FEC_ULT_PG D NOT NULL, ;
                        CTS_MOROSA N(3, 0) NOT NULL, ;
                        FECHA_PROCESO D NOT NULL, ;
                        ID_CONTRA C(8) NOT NULL, ;
                        NOTA M NOT NULL)

***** Create each index for MODCONTRA *****

***** Change properties for MODCONTRA *****
ENDFUNC

FUNCTION MakeTable_DEVCONTRA
***** Table setup for DEVCONTRA *****
CREATE TABLE 'DEVCONTRA.DBF' NAME 'DEVCONTRA' (CEDULA C(9) NOT NULL, ;
                        COD_CASA C(4) NOT NULL, ;
                        NUM_CONTRA C(8) NOT NULL, ;
                        RELAINCLUS C(8) NOT NULL, ;
                        FEC_CONTRA D NOT NULL, ;
                        MON_CONTRA N(13, 2) NOT NULL, ;
                        FEC_VIGENC D NOT NULL, ;
                        MODALIDAD N(1, 0) NOT NULL, ;
                        NUM_CUOTAS N(3, 0) NOT NULL, ;
                        MON_CUOTAS N(13, 2) NOT NULL, ;
                        CODIGO_ORG C(4) NOT NULL, ;
                        FEC_ENVIO D NOT NULL, ;
                        FEC_ULT_MD D NOT NULL, ;
                        FEC_ANULAC D NOT NULL, ;
                        CTS_PAGADA N(3, 0) NOT NULL, ;
                        SALDO N(13, 2) NOT NULL, ;
                        FEC_ULT_PG D NOT NULL, ;
                        CTS_MOROSA N(3, 0) NOT NULL, ;
                        FECHA_PROCESO D NOT NULL, ;
                        COD_MOTIVO C(3) NOT NULL, ;
                        NOM_MOTIVO C(50) NOT NULL, ;
                        ID_CONTRA C(8) NOT NULL)

***** Create each index for DEVCONTRA *****
INDEX ON CEDULA+COD_CASA+NUM_CONTRA TAG DEVCONTRA COLLATE 'MACHINE'
INDEX ON COD_MOTIVO TAG CODDEV COLLATE 'MACHINE'

***** Change properties for DEVCONTRA *****
ENDFUNC

FUNCTION MakeView_VEWDBPAGOS
***************** View setup for VEWDBPAGOS ***************

CREATE SQL VIEW "VEWDBPAGOS" ; 
   AS SELECT Organism.nombre_org, Dbpagos.desde, Dbpagos.hasta, Dbpagos.porcentaje, Dbpagos.procesar, Dbpagos.codigo_org, Dbpagos.cod_casa FROM  PST!DBPAGOS, PST!ORGANISM WHERE  Dbpagos.cod_casa = ( ?CASACOME.cod_casa ) AND  Dbpagos.codigo_org = Organism.codigo_org ORDER BY Organism.nombre_org

DBSetProp('VEWDBPAGOS', 'View', 'UpdateType', 1)
DBSetProp('VEWDBPAGOS', 'View', 'WhereType', 3)
DBSetProp('VEWDBPAGOS', 'View', 'FetchMemo', .T.)
DBSetProp('VEWDBPAGOS', 'View', 'SendUpdates', .F.)
DBSetProp('VEWDBPAGOS', 'View', 'UseMemoSize', 255)
DBSetProp('VEWDBPAGOS', 'View', 'FetchSize', 100)
DBSetProp('VEWDBPAGOS', 'View', 'MaxRecords', -1)
DBSetProp('VEWDBPAGOS', 'View', 'Tables', 'PST!ORGANISM,PST!DBPAGOS')
DBSetProp('VEWDBPAGOS', 'View', 'Prepared', .F.)
DBSetProp('VEWDBPAGOS', 'View', 'CompareMemo', .T.)
DBSetProp('VEWDBPAGOS', 'View', 'FetchAsNeeded', .F.)
DBSetProp('VEWDBPAGOS', 'View', 'Comment', "")
DBSetProp('VEWDBPAGOS', 'View', 'BatchUpdateCount', 1)
DBSetProp('VEWDBPAGOS', 'View', 'ShareConnection', .F.)
DBSetProp('VEWDBPAGOS', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for VEWDBPAGOS
* Props for the VEWDBPAGOS.nombre_org field.
DBSetProp('VEWDBPAGOS.nombre_org', 'Field', 'KeyField', .F.)
DBSetProp('VEWDBPAGOS.nombre_org', 'Field', 'Updatable', .F.)
DBSetProp('VEWDBPAGOS.nombre_org', 'Field', 'UpdateName', 'pst!organism.nombre_org')
DBSetProp('VEWDBPAGOS.nombre_org', 'Field', 'DataType', "C(30)")
* Props for the VEWDBPAGOS.desde field.
DBSetProp('VEWDBPAGOS.desde', 'Field', 'KeyField', .F.)
DBSetProp('VEWDBPAGOS.desde', 'Field', 'Updatable', .F.)
DBSetProp('VEWDBPAGOS.desde', 'Field', 'UpdateName', 'pst!dbpagos.desde')
DBSetProp('VEWDBPAGOS.desde', 'Field', 'DataType', "N(15,2)")
* Props for the VEWDBPAGOS.hasta field.
DBSetProp('VEWDBPAGOS.hasta', 'Field', 'KeyField', .F.)
DBSetProp('VEWDBPAGOS.hasta', 'Field', 'Updatable', .F.)
DBSetProp('VEWDBPAGOS.hasta', 'Field', 'UpdateName', 'pst!dbpagos.hasta')
DBSetProp('VEWDBPAGOS.hasta', 'Field', 'DataType', "N(15,2)")
* Props for the VEWDBPAGOS.porcentaje field.
DBSetProp('VEWDBPAGOS.porcentaje', 'Field', 'KeyField', .F.)
DBSetProp('VEWDBPAGOS.porcentaje', 'Field', 'Updatable', .F.)
DBSetProp('VEWDBPAGOS.porcentaje', 'Field', 'UpdateName', 'pst!dbpagos.porcentaje')
DBSetProp('VEWDBPAGOS.porcentaje', 'Field', 'DataType', "N(5,2)")
* Props for the VEWDBPAGOS.procesar field.
DBSetProp('VEWDBPAGOS.procesar', 'Field', 'KeyField', .F.)
DBSetProp('VEWDBPAGOS.procesar', 'Field', 'Updatable', .F.)
DBSetProp('VEWDBPAGOS.procesar', 'Field', 'UpdateName', 'pst!dbpagos.procesar')
DBSetProp('VEWDBPAGOS.procesar', 'Field', 'DataType', "N(8,2)")
* Props for the VEWDBPAGOS.codigo_org field.
DBSetProp('VEWDBPAGOS.codigo_org', 'Field', 'KeyField', .F.)
DBSetProp('VEWDBPAGOS.codigo_org', 'Field', 'Updatable', .F.)
DBSetProp('VEWDBPAGOS.codigo_org', 'Field', 'UpdateName', 'pst!dbpagos.codigo_org')
DBSetProp('VEWDBPAGOS.codigo_org', 'Field', 'DataType', "C(4)")
* Props for the VEWDBPAGOS.cod_casa field.
DBSetProp('VEWDBPAGOS.cod_casa', 'Field', 'KeyField', .F.)
DBSetProp('VEWDBPAGOS.cod_casa', 'Field', 'Updatable', .F.)
DBSetProp('VEWDBPAGOS.cod_casa', 'Field', 'UpdateName', 'pst!dbpagos.cod_casa')
DBSetProp('VEWDBPAGOS.cod_casa', 'Field', 'DataType', "C(4)")
ENDFUNC
 
*************** Begin Relations Setup **************

FUNCTION MakeRelation_1
ALTER TABLE 'ACCESOS' ADD FOREIGN KEY TAG USUACCESO REFERENCES USUARIOS TAG USUA
ENDFUNC


FUNCTION MakeRelation_2
ALTER TABLE 'DBPAGOS' ADD FOREIGN KEY TAG DBPAGOCASA REFERENCES CASACOME TAG CASACOME
ENDFUNC


FUNCTION MakeRelation_3
ALTER TABLE 'COM_PROM' ADD FOREIGN KEY TAG COMCASA2 REFERENCES CASACOME TAG CASACOME
ENDFUNC


FUNCTION MakeRelation_4
ALTER TABLE 'DBPAGOS' ADD FOREIGN KEY TAG DBPAGORG REFERENCES ORGANISM TAG ORGANISM
ENDFUNC


FUNCTION MakeRelation_5
ALTER TABLE 'COM_PROM' ADD FOREIGN KEY TAG COM_CASA REFERENCES PROMOTOR TAG PROMCOD
ENDFUNC


FUNCTION MakeRelation_6
ALTER TABLE 'ORGUSUA' ADD FOREIGN KEY TAG ORGUSUA REFERENCES ORGANISM TAG ORGANISM
ENDFUNC

FUNCTION MakeRI
***** Referential Integrity Setup *****
CLOSE DATABASE
USE 'PST.DBC'
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'accesos'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'usuacceso'$Property AND 'usuarios'$Property AND 'usua'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CCI   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'dbpagos'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'dbpagocasa'$Property AND 'casacome'$Property AND 'casacome'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CCR   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'com_prom'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'comcasa2'$Property AND 'casacome'$Property AND 'casacome'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CCR   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'dbpagos'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'dbpagorg'$Property AND 'organism'$Property AND 'organism'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CCR   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'orgusua'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'orgusua'$Property AND 'organism'$Property AND 'organism'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CCR   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
USE
ENDFUNC


FUNCTION DisplayStatus(lcMessage)
WAIT WINDOW NOWAIT lcMessage
ENDFUNC
